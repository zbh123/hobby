/* This file is automatically generated. DO NOT EDIT! */

#ifndef _sf_komplex_h
#define _sf_komplex_h


#include "kiss_fft.h"
#include "c99.h"


#ifndef SF_HAS_COMPLEX_H


#define crealf  sf_crealf
#define creal   sf_creal
#define cimagf  sf_cimagf
#define cimag   sf_cimag
#define conjf   sf_conjf
#define cabsf   sf_cabsf
#define cabs    sf_cabsd
#define cargf   sf_cargf
#define carg    sf_carg
#define ccosf   sf_ccosf
#define csinf   sf_csinf
#define ctanf   sf_ctanf
#define cacosf  sf_cacosf
#define casinf  sf_casinf
#define catanf  sf_catanf
#define ccoshf  sf_ccoshf
#define csinhf  sf_csinhf
#define ctanhf  sf_ctanhf
#define cacoshf sf_cacoshf
#define casinhf sf_casinhf
#define catanhf sf_catanhf
#define cexpf   sf_cexpf
#define clogf   sf_clogf
#define csqrtf  sf_csqrtf
#define cpowf   sf_cpowf


double sf_creal(sf_double_complex c);
/*< real part >*/


double sf_cimag(sf_double_complex c);
/*< imaginary part >*/


sf_double_complex sf_dcneg(sf_double_complex a);
/*< unary minus >*/


sf_double_complex sf_dcadd(sf_double_complex a, sf_double_complex b);
/*< complex addition >*/


sf_double_complex sf_dcsub(sf_double_complex a, sf_double_complex b);
/*< complex subtraction >*/


sf_double_complex sf_dcmul(sf_double_complex a, sf_double_complex b);
/*< complex multiplication >*/


kiss_fft_cpx sf_dccmul(sf_double_complex a, kiss_fft_cpx b);
/*< complex multiplication >*/


sf_double_complex sf_dcdmul(sf_double_complex a, kiss_fft_cpx b);
/*< complex multiplication >*/


sf_double_complex sf_dcrmul(sf_double_complex a, double b);
/*< complex by real multiplication >*/


sf_double_complex sf_dcdiv(sf_double_complex a, sf_double_complex b);
/*< complex division >*/


double sf_carg(sf_double_complex z);
/*< replacement for cargf >*/


double sf_cabsd(sf_double_complex z);
/*< replacement for cabs >*/


#endif


#if !defined(__cplusplus)


float sf_cabs(sf_complex c);
/*< complex absolute value >*/


#endif


float sf_crealf(kiss_fft_cpx c);
/*< real part >*/


float sf_cimagf(kiss_fft_cpx c);
/*< imaginary part >*/


void cprint (sf_complex c);
/*< print a complex number (for debugging purposes) >*/


kiss_fft_cpx sf_cadd(kiss_fft_cpx a, kiss_fft_cpx b);
/*< complex addition >*/


kiss_fft_cpx sf_csub(kiss_fft_cpx a, kiss_fft_cpx b);
/*< complex subtraction >*/


kiss_fft_cpx sf_csqrtf (kiss_fft_cpx c);
/*< complex square root >*/


kiss_fft_cpx sf_cdiv(kiss_fft_cpx a, kiss_fft_cpx b);
/*< complex division >*/


kiss_fft_cpx sf_cmul(kiss_fft_cpx a, kiss_fft_cpx b);
/*< complex multiplication >*/


kiss_fft_cpx sf_crmul(kiss_fft_cpx a, float b);
/*< complex by real multiplication >*/


kiss_fft_cpx sf_cneg(kiss_fft_cpx a);
/*< unary minus >*/


kiss_fft_cpx sf_conjf(kiss_fft_cpx z);
/*< complex conjugate >*/


float sf_cabsf(kiss_fft_cpx z);
/*< replacement for cabsf >*/


float sf_cargf(kiss_fft_cpx z);
/*< replacement for cargf >*/


kiss_fft_cpx sf_ctanhf(kiss_fft_cpx z);
/*< complex hyperbolic tangent >*/


kiss_fft_cpx sf_ccosf(kiss_fft_cpx z);
/*< complex cosine >*/


kiss_fft_cpx sf_ccoshf(kiss_fft_cpx z);
/*< complex hyperbolic cosine >*/


kiss_fft_cpx sf_csinf(kiss_fft_cpx z);
/*< complex sine >*/


kiss_fft_cpx sf_csinhf(kiss_fft_cpx z);
/*< complex hyperbolic sine >*/


kiss_fft_cpx sf_clogf(kiss_fft_cpx z);
/*< complex natural logarithm >*/


kiss_fft_cpx sf_cexpf(kiss_fft_cpx z);
/*< complex exponential >*/


kiss_fft_cpx sf_ctanf(kiss_fft_cpx z);
/*< complex tangent >*/


kiss_fft_cpx sf_casinf(kiss_fft_cpx z);
/*< complex hyperbolic arcsine >*/


kiss_fft_cpx sf_cacosf(kiss_fft_cpx z);
/*< complex hyperbolic arccosine >*/


kiss_fft_cpx sf_catanf(kiss_fft_cpx z);
/*< complex arctangent >*/


kiss_fft_cpx sf_catanhf(kiss_fft_cpx z);
/*< complex hyperbolic arctangent >*/


kiss_fft_cpx sf_casinhf(kiss_fft_cpx z);
/*< complex hyperbolic sine >*/


kiss_fft_cpx sf_cacoshf(kiss_fft_cpx z);
/*< complex hyperbolic cosine >*/


kiss_fft_cpx sf_cpowf(kiss_fft_cpx a, kiss_fft_cpx b);
/*< complex power >*/

#endif
